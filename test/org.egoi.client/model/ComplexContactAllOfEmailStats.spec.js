/**
 * APIv3 (Beta)
 *  # Introduction Just a quick pick!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # HTTP Methods for RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  <security-definitions/>
 *
 * The version of the OpenAPI document: 3.0.0-beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/org.egoi.client/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/org.egoi.client/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApIv3Beta);
  }
}(this, function(expect, ApIv3Beta) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApIv3Beta.ComplexContactAllOfEmailStats();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ComplexContactAllOfEmailStats', function() {
    it('should create an instance of ComplexContactAllOfEmailStats', function() {
      // uncomment below and update the code to test ComplexContactAllOfEmailStats
      //var instane = new ApIv3Beta.ComplexContactAllOfEmailStats();
      //expect(instance).to.be.a(ApIv3Beta.ComplexContactAllOfEmailStats);
    });

    it('should have the property sent (base name: "sent")', function() {
      // uncomment below and update the code to test the property sent
      //var instane = new ApIv3Beta.ComplexContactAllOfEmailStats();
      //expect(instance).to.be();
    });

    it('should have the property opens (base name: "opens")', function() {
      // uncomment below and update the code to test the property opens
      //var instane = new ApIv3Beta.ComplexContactAllOfEmailStats();
      //expect(instance).to.be();
    });

    it('should have the property clicks (base name: "clicks")', function() {
      // uncomment below and update the code to test the property clicks
      //var instane = new ApIv3Beta.ComplexContactAllOfEmailStats();
      //expect(instance).to.be();
    });

    it('should have the property softBounces (base name: "soft_bounces")', function() {
      // uncomment below and update the code to test the property softBounces
      //var instane = new ApIv3Beta.ComplexContactAllOfEmailStats();
      //expect(instance).to.be();
    });

    it('should have the property hardBounces (base name: "hard_bounces")', function() {
      // uncomment below and update the code to test the property hardBounces
      //var instane = new ApIv3Beta.ComplexContactAllOfEmailStats();
      //expect(instance).to.be();
    });

    it('should have the property forwards (base name: "forwards")', function() {
      // uncomment below and update the code to test the property forwards
      //var instane = new ApIv3Beta.ComplexContactAllOfEmailStats();
      //expect(instance).to.be();
    });

    it('should have the property conversions (base name: "conversions")', function() {
      // uncomment below and update the code to test the property conversions
      //var instane = new ApIv3Beta.ComplexContactAllOfEmailStats();
      //expect(instance).to.be();
    });

    it('should have the property socialActions (base name: "social_actions")', function() {
      // uncomment below and update the code to test the property socialActions
      //var instane = new ApIv3Beta.ComplexContactAllOfEmailStats();
      //expect(instance).to.be();
    });

    it('should have the property lastSendDate (base name: "last_send_date")', function() {
      // uncomment below and update the code to test the property lastSendDate
      //var instane = new ApIv3Beta.ComplexContactAllOfEmailStats();
      //expect(instance).to.be();
    });

    it('should have the property lastOpenDate (base name: "last_open_date")', function() {
      // uncomment below and update the code to test the property lastOpenDate
      //var instane = new ApIv3Beta.ComplexContactAllOfEmailStats();
      //expect(instance).to.be();
    });

    it('should have the property lastClickDate (base name: "last_click_date")', function() {
      // uncomment below and update the code to test the property lastClickDate
      //var instane = new ApIv3Beta.ComplexContactAllOfEmailStats();
      //expect(instance).to.be();
    });

    it('should have the property lastOpenCountry (base name: "last_open_country")', function() {
      // uncomment below and update the code to test the property lastOpenCountry
      //var instane = new ApIv3Beta.ComplexContactAllOfEmailStats();
      //expect(instance).to.be();
    });

    it('should have the property lastOpenRegion (base name: "last_open_region")', function() {
      // uncomment below and update the code to test the property lastOpenRegion
      //var instane = new ApIv3Beta.ComplexContactAllOfEmailStats();
      //expect(instance).to.be();
    });

    it('should have the property lastOpenCity (base name: "last_open_city")', function() {
      // uncomment below and update the code to test the property lastOpenCity
      //var instane = new ApIv3Beta.ComplexContactAllOfEmailStats();
      //expect(instance).to.be();
    });

  });

}));
