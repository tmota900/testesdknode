/**
 * APIv3 (Beta)
 *  # Introduction Just a quick pick!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # HTTP Methods for RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  <security-definitions/>
 *
 * The version of the OpenAPI document: 3.0.0-beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/org.egoi.client/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/org.egoi.client/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApIv3Beta);
  }
}(this, function(expect, ApIv3Beta) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApIv3Beta.ContactInsideBase();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ContactInsideBase', function() {
    it('should create an instance of ContactInsideBase', function() {
      // uncomment below and update the code to test ContactInsideBase
      //var instane = new ApIv3Beta.ContactInsideBase();
      //expect(instance).to.be.a(ApIv3Beta.ContactInsideBase);
    });

    it('should have the property contactId (base name: "contact_id")', function() {
      // uncomment below and update the code to test the property contactId
      //var instane = new ApIv3Beta.ContactInsideBase();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new ApIv3Beta.ContactInsideBase();
      //expect(instance).to.be();
    });

    it('should have the property consent (base name: "consent")', function() {
      // uncomment below and update the code to test the property consent
      //var instane = new ApIv3Beta.ContactInsideBase();
      //expect(instance).to.be();
    });

    it('should have the property consentDate (base name: "consent_date")', function() {
      // uncomment below and update the code to test the property consentDate
      //var instane = new ApIv3Beta.ContactInsideBase();
      //expect(instance).to.be();
    });

    it('should have the property subscriptionMethod (base name: "subscription_method")', function() {
      // uncomment below and update the code to test the property subscriptionMethod
      //var instane = new ApIv3Beta.ContactInsideBase();
      //expect(instance).to.be();
    });

    it('should have the property subscriptionDate (base name: "subscription_date")', function() {
      // uncomment below and update the code to test the property subscriptionDate
      //var instane = new ApIv3Beta.ContactInsideBase();
      //expect(instance).to.be();
    });

    it('should have the property subscriptionForm (base name: "subscription_form")', function() {
      // uncomment below and update the code to test the property subscriptionForm
      //var instane = new ApIv3Beta.ContactInsideBase();
      //expect(instance).to.be();
    });

    it('should have the property unsubscriptionMethod (base name: "unsubscription_method")', function() {
      // uncomment below and update the code to test the property unsubscriptionMethod
      //var instane = new ApIv3Beta.ContactInsideBase();
      //expect(instance).to.be();
    });

    it('should have the property unsubscriptionReason (base name: "unsubscription_reason")', function() {
      // uncomment below and update the code to test the property unsubscriptionReason
      //var instane = new ApIv3Beta.ContactInsideBase();
      //expect(instance).to.be();
    });

    it('should have the property unsubscriptionObservation (base name: "unsubscription_observation")', function() {
      // uncomment below and update the code to test the property unsubscriptionObservation
      //var instane = new ApIv3Beta.ContactInsideBase();
      //expect(instance).to.be();
    });

    it('should have the property unsubscriptionDate (base name: "unsubscription_date")', function() {
      // uncomment below and update the code to test the property unsubscriptionDate
      //var instane = new ApIv3Beta.ContactInsideBase();
      //expect(instance).to.be();
    });

    it('should have the property changeDate (base name: "change_date")', function() {
      // uncomment below and update the code to test the property changeDate
      //var instane = new ApIv3Beta.ContactInsideBase();
      //expect(instance).to.be();
    });

    it('should have the property firstName (base name: "first_name")', function() {
      // uncomment below and update the code to test the property firstName
      //var instane = new ApIv3Beta.ContactInsideBase();
      //expect(instance).to.be();
    });

    it('should have the property lastName (base name: "last_name")', function() {
      // uncomment below and update the code to test the property lastName
      //var instane = new ApIv3Beta.ContactInsideBase();
      //expect(instance).to.be();
    });

    it('should have the property birthDate (base name: "birth_date")', function() {
      // uncomment below and update the code to test the property birthDate
      //var instane = new ApIv3Beta.ContactInsideBase();
      //expect(instance).to.be();
    });

    it('should have the property language (base name: "language")', function() {
      // uncomment below and update the code to test the property language
      //var instane = new ApIv3Beta.ContactInsideBase();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instane = new ApIv3Beta.ContactInsideBase();
      //expect(instance).to.be();
    });

    it('should have the property emailStatus (base name: "email_status")', function() {
      // uncomment below and update the code to test the property emailStatus
      //var instane = new ApIv3Beta.ContactInsideBase();
      //expect(instance).to.be();
    });

    it('should have the property cellphone (base name: "cellphone")', function() {
      // uncomment below and update the code to test the property cellphone
      //var instane = new ApIv3Beta.ContactInsideBase();
      //expect(instance).to.be();
    });

    it('should have the property cellphoneStatus (base name: "cellphone_status")', function() {
      // uncomment below and update the code to test the property cellphoneStatus
      //var instane = new ApIv3Beta.ContactInsideBase();
      //expect(instance).to.be();
    });

    it('should have the property phone (base name: "phone")', function() {
      // uncomment below and update the code to test the property phone
      //var instane = new ApIv3Beta.ContactInsideBase();
      //expect(instance).to.be();
    });

    it('should have the property phoneStatus (base name: "phone_status")', function() {
      // uncomment below and update the code to test the property phoneStatus
      //var instane = new ApIv3Beta.ContactInsideBase();
      //expect(instance).to.be();
    });

    it('should have the property pushTokenAndroid (base name: "push_token_android")', function() {
      // uncomment below and update the code to test the property pushTokenAndroid
      //var instane = new ApIv3Beta.ContactInsideBase();
      //expect(instance).to.be();
    });

    it('should have the property pushTokenIos (base name: "push_token_ios")', function() {
      // uncomment below and update the code to test the property pushTokenIos
      //var instane = new ApIv3Beta.ContactInsideBase();
      //expect(instance).to.be();
    });

  });

}));
