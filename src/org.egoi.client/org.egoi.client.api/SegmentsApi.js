/**
 * APIv3 (Beta)
 *  # Introduction Just a quick pick!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # HTTP Methods for RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  <security-definitions/>
 *
 * The version of the OpenAPI document: 3.0.0-beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequest from '../org.egoi.client.model/BadRequest';
import Conflict from '../org.egoi.client.model/Conflict';
import DeleteSegmentsConflict from '../org.egoi.client.model/DeleteSegmentsConflict';
import Forbidden from '../org.egoi.client.model/Forbidden';
import InternalServerError from '../org.egoi.client.model/InternalServerError';
import NotFound from '../org.egoi.client.model/NotFound';
import SavedSegment from '../org.egoi.client.model/SavedSegment';
import Segment from '../org.egoi.client.model/Segment';
import SegmentCollection from '../org.egoi.client.model/SegmentCollection';
import Unauthorized from '../org.egoi.client.model/Unauthorized';
import UnprocessableEntity from '../org.egoi.client.model/UnprocessableEntity';

/**
* Segments service.
* @module org.egoi.client/org.egoi.client.api/SegmentsApi
* @version 3.0.0-beta
*/
export default class SegmentsApi {

    /**
    * Constructs a new SegmentsApi. 
    * @alias module:org.egoi.client/org.egoi.client.api/SegmentsApi
    * @class
    * @param {module:org.egoi.client/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:org.egoi.client/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSegment operation.
     * @callback module:org.egoi.client/org.egoi.client.api/SegmentsApi~createSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:org.egoi.client/org.egoi.client.model/SavedSegment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new segment
     * Create a new segment
     * @param {Number} listId ID of the List
     * @param {module:org.egoi.client/org.egoi.client.model/SavedSegment} savedSegment Parameters for the segment
     * @param {module:org.egoi.client/org.egoi.client.api/SegmentsApi~createSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.egoi.client/org.egoi.client.model/SavedSegment}
     */
    createSegment(listId, savedSegment, callback) {
      let postBody = savedSegment;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling createSegment");
      }
      // verify the required parameter 'savedSegment' is set
      if (savedSegment === undefined || savedSegment === null) {
        throw new Error("Missing the required parameter 'savedSegment' when calling createSegment");
      }

      let pathParams = {
        'list_id': listId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SavedSegment;
      return this.apiClient.callApi(
        '/lists/{list_id}/segments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSegment operation.
     * @callback module:org.egoi.client/org.egoi.client.api/SegmentsApi~deleteSegmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove segment
     * Remove segment information given its ID
     * @param {String} segmentId ID of the Segment
     * @param {Number} listId ID of the List
     * @param {module:org.egoi.client/org.egoi.client.api/SegmentsApi~deleteSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSegment(segmentId, listId, callback) {
      let postBody = null;
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling deleteSegment");
      }
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling deleteSegment");
      }

      let pathParams = {
        'segment_id': segmentId,
        'list_id': listId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/lists/{list_id}/segments/{segment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllSegments operation.
     * @callback module:org.egoi.client/org.egoi.client.api/SegmentsApi~getAllSegmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:org.egoi.client/org.egoi.client.model/SegmentCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all segments
     * Returns all segments
     * @param {Number} listId ID of the List
     * @param {Object} opts Optional parameters
     * @param {module:org.egoi.client/org.egoi.client.model/String} opts.type Type of segment
     * @param {String} opts.name Segment name
     * @param {Number} opts.offset Element offset (starting at zero for the first element)
     * @param {Number} opts.limit Number of items to return (default to 10)
     * @param {module:org.egoi.client/org.egoi.client.api/SegmentsApi~getAllSegmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.egoi.client/org.egoi.client.model/SegmentCollection}
     */
    getAllSegments(listId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling getAllSegments");
      }

      let pathParams = {
        'list_id': listId
      };
      let queryParams = {
        'type': opts['type'],
        'name': opts['name'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SegmentCollection;
      return this.apiClient.callApi(
        '/lists/{list_id}/segments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSegment operation.
     * @callback module:org.egoi.client/org.egoi.client.api/SegmentsApi~getSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:org.egoi.client/org.egoi.client.model/Segment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get segment
     * Returns segment information given its ID
     * @param {String} segmentId ID of the Segment
     * @param {Number} listId ID of the List
     * @param {module:org.egoi.client/org.egoi.client.api/SegmentsApi~getSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.egoi.client/org.egoi.client.model/Segment}
     */
    getSegment(segmentId, listId, callback) {
      let postBody = null;
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling getSegment");
      }
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling getSegment");
      }

      let pathParams = {
        'segment_id': segmentId,
        'list_id': listId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Segment;
      return this.apiClient.callApi(
        '/lists/{list_id}/segments/{segment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
