/**
 * APIv3 (Beta)
 *  # Introduction Just a quick pick!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # HTTP Methods for RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  <security-definitions/>
 *
 * The version of the OpenAPI document: 3.0.0-beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequest from '../org.egoi.client.model/BadRequest';
import DeleteFieldsConflict from '../org.egoi.client.model/DeleteFieldsConflict';
import Field from '../org.egoi.client.model/Field';
import FieldCollection from '../org.egoi.client.model/FieldCollection';
import FieldOption from '../org.egoi.client.model/FieldOption';
import FieldOptionsCollection from '../org.egoi.client.model/FieldOptionsCollection';
import Forbidden from '../org.egoi.client.model/Forbidden';
import InternalServerError from '../org.egoi.client.model/InternalServerError';
import NotFound from '../org.egoi.client.model/NotFound';
import PatchRequestBaseField from '../org.egoi.client.model/PatchRequestBaseField';
import PatchRequestField from '../org.egoi.client.model/PatchRequestField';
import Unauthorized from '../org.egoi.client.model/Unauthorized';
import UnprocessableEntity from '../org.egoi.client.model/UnprocessableEntity';

/**
* Fields service.
* @module org.egoi.client/org.egoi.client.api/FieldsApi
* @version 3.0.0-beta
*/
export default class FieldsApi {

    /**
    * Constructs a new FieldsApi. 
    * @alias module:org.egoi.client/org.egoi.client.api/FieldsApi
    * @class
    * @param {module:org.egoi.client/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:org.egoi.client/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createExtraField operation.
     * @callback module:org.egoi.client/org.egoi.client.api/FieldsApi~createExtraFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:org.egoi.client/org.egoi.client.model/Field} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create extra field
     * Creates an extra field
     * @param {Number} listId ID of the List
     * @param {module:org.egoi.client/org.egoi.client.model/Field} field Parameters for the extra field
     * @param {module:org.egoi.client/org.egoi.client.api/FieldsApi~createExtraFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.egoi.client/org.egoi.client.model/Field}
     */
    createExtraField(listId, field, callback) {
      let postBody = field;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling createExtraField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling createExtraField");
      }

      let pathParams = {
        'list_id': listId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Field;
      return this.apiClient.callApi(
        '/lists/{list_id}/fields/extra', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFieldOption operation.
     * @callback module:org.egoi.client/org.egoi.client.api/FieldsApi~createFieldOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:org.egoi.client/org.egoi.client.model/FieldOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new field option
     * Creates a field option
     * @param {Number} listId ID of the List
     * @param {Number} fieldId ID of the Field
     * @param {module:org.egoi.client/org.egoi.client.model/FieldOption} fieldOption Parameters for the field option
     * @param {module:org.egoi.client/org.egoi.client.api/FieldsApi~createFieldOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.egoi.client/org.egoi.client.model/FieldOption}
     */
    createFieldOption(listId, fieldId, fieldOption, callback) {
      let postBody = fieldOption;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling createFieldOption");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling createFieldOption");
      }
      // verify the required parameter 'fieldOption' is set
      if (fieldOption === undefined || fieldOption === null) {
        throw new Error("Missing the required parameter 'fieldOption' when calling createFieldOption");
      }

      let pathParams = {
        'list_id': listId,
        'field_id': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FieldOption;
      return this.apiClient.callApi(
        '/lists/{list_id}/fields/extra/{field_id}/options', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExtraField operation.
     * @callback module:org.egoi.client/org.egoi.client.api/FieldsApi~deleteExtraFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove extra field
     * Removes an extra field given its ID
     * @param {Number} listId ID of the List
     * @param {Number} fieldId ID of the Field
     * @param {module:org.egoi.client/org.egoi.client.api/FieldsApi~deleteExtraFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteExtraField(listId, fieldId, callback) {
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling deleteExtraField");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling deleteExtraField");
      }

      let pathParams = {
        'list_id': listId,
        'field_id': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/lists/{list_id}/fields/extra/{field_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFieldOption operation.
     * @callback module:org.egoi.client/org.egoi.client.api/FieldsApi~deleteFieldOptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an option
     * Deletes an option of a list of values field
     * @param {Number} listId ID of the List
     * @param {Number} fieldId ID of the Field
     * @param {Number} optionId ID of the field option
     * @param {module:org.egoi.client/org.egoi.client.api/FieldsApi~deleteFieldOptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFieldOption(listId, fieldId, optionId, callback) {
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling deleteFieldOption");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling deleteFieldOption");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling deleteFieldOption");
      }

      let pathParams = {
        'list_id': listId,
        'field_id': fieldId,
        'option_id': optionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/lists/{list_id}/fields/extra/{field_id}/options/{option_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllFieldOptions operation.
     * @callback module:org.egoi.client/org.egoi.client.api/FieldsApi~getAllFieldOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:org.egoi.client/org.egoi.client.model/FieldOptionsCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all field options
     * Returns all options of a given field
     * @param {Number} listId ID of the List
     * @param {Number} fieldId ID of the Field
     * @param {module:org.egoi.client/org.egoi.client.api/FieldsApi~getAllFieldOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.egoi.client/org.egoi.client.model/FieldOptionsCollection}
     */
    getAllFieldOptions(listId, fieldId, callback) {
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling getAllFieldOptions");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling getAllFieldOptions");
      }

      let pathParams = {
        'list_id': listId,
        'field_id': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FieldOptionsCollection;
      return this.apiClient.callApi(
        '/lists/{list_id}/fields/extra/{field_id}/options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllFields operation.
     * @callback module:org.egoi.client/org.egoi.client.api/FieldsApi~getAllFieldsCallback
     * @param {String} error Error message, if any.
     * @param {module:org.egoi.client/org.egoi.client.model/FieldCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all fields
     * Returns all fields
     * @param {Number} listId ID of the List
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Element offset (starting at zero for the first element)
     * @param {Number} opts.limit Number of items to return (default to 10)
     * @param {module:org.egoi.client/org.egoi.client.api/FieldsApi~getAllFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.egoi.client/org.egoi.client.model/FieldCollection}
     */
    getAllFields(listId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling getAllFields");
      }

      let pathParams = {
        'list_id': listId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FieldCollection;
      return this.apiClient.callApi(
        '/lists/{list_id}/fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchBaseField operation.
     * @callback module:org.egoi.client/org.egoi.client.api/FieldsApi~patchBaseFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:org.egoi.client/org.egoi.client.model/Field} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update base field
     * Updates a base field
     * @param {Number} listId ID of the List
     * @param {String} fieldId ID of the base field
     * @param {module:org.egoi.client/org.egoi.client.model/PatchRequestBaseField} patchRequestBaseField Parameters for the extra field
     * @param {module:org.egoi.client/org.egoi.client.api/FieldsApi~patchBaseFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.egoi.client/org.egoi.client.model/Field}
     */
    patchBaseField(listId, fieldId, patchRequestBaseField, callback) {
      let postBody = patchRequestBaseField;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling patchBaseField");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling patchBaseField");
      }
      // verify the required parameter 'patchRequestBaseField' is set
      if (patchRequestBaseField === undefined || patchRequestBaseField === null) {
        throw new Error("Missing the required parameter 'patchRequestBaseField' when calling patchBaseField");
      }

      let pathParams = {
        'list_id': listId,
        'field_id': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Field;
      return this.apiClient.callApi(
        '/lists/{list_id}/fields/base/{field_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchExtraField operation.
     * @callback module:org.egoi.client/org.egoi.client.api/FieldsApi~patchExtraFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:org.egoi.client/org.egoi.client.model/Field} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update extra field
     * Updates an extra field
     * @param {Number} listId ID of the List
     * @param {Number} fieldId ID of the Field
     * @param {module:org.egoi.client/org.egoi.client.model/PatchRequestField} patchRequestField Parameters for the extra field
     * @param {module:org.egoi.client/org.egoi.client.api/FieldsApi~patchExtraFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.egoi.client/org.egoi.client.model/Field}
     */
    patchExtraField(listId, fieldId, patchRequestField, callback) {
      let postBody = patchRequestField;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling patchExtraField");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling patchExtraField");
      }
      // verify the required parameter 'patchRequestField' is set
      if (patchRequestField === undefined || patchRequestField === null) {
        throw new Error("Missing the required parameter 'patchRequestField' when calling patchExtraField");
      }

      let pathParams = {
        'list_id': listId,
        'field_id': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Field;
      return this.apiClient.callApi(
        '/lists/{list_id}/fields/extra/{field_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFieldOption operation.
     * @callback module:org.egoi.client/org.egoi.client.api/FieldsApi~updateFieldOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:org.egoi.client/org.egoi.client.model/FieldOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update field option
     * Updates a field option
     * @param {Number} listId ID of the List
     * @param {Number} fieldId ID of the Field
     * @param {Number} optionId ID of the field option
     * @param {module:org.egoi.client/org.egoi.client.model/FieldOption} fieldOption Parameters for the field option
     * @param {module:org.egoi.client/org.egoi.client.api/FieldsApi~updateFieldOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.egoi.client/org.egoi.client.model/FieldOption}
     */
    updateFieldOption(listId, fieldId, optionId, fieldOption, callback) {
      let postBody = fieldOption;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling updateFieldOption");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling updateFieldOption");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling updateFieldOption");
      }
      // verify the required parameter 'fieldOption' is set
      if (fieldOption === undefined || fieldOption === null) {
        throw new Error("Missing the required parameter 'fieldOption' when calling updateFieldOption");
      }

      let pathParams = {
        'list_id': listId,
        'field_id': fieldId,
        'option_id': optionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FieldOption;
      return this.apiClient.callApi(
        '/lists/{list_id}/fields/extra/{field_id}/options/{option_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
