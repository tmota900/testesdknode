/**
 * APIv3 (Beta)
 *  # Introduction Just a quick pick!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # HTTP Methods for RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  <security-definitions/>
 *
 * The version of the OpenAPI document: 3.0.0-beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequest from '../org.egoi.client.model/BadRequest';
import CampaignGroup from '../org.egoi.client.model/CampaignGroup';
import CampaignGroupAllOf from '../org.egoi.client.model/CampaignGroupAllOf';
import CampaignGroupCollection from '../org.egoi.client.model/CampaignGroupCollection';
import Conflict from '../org.egoi.client.model/Conflict';
import Forbidden from '../org.egoi.client.model/Forbidden';
import InternalServerError from '../org.egoi.client.model/InternalServerError';
import NotFound from '../org.egoi.client.model/NotFound';
import Unauthorized from '../org.egoi.client.model/Unauthorized';
import UnprocessableEntity from '../org.egoi.client.model/UnprocessableEntity';

/**
* CampaignGroups service.
* @module org.egoi.client/org.egoi.client.api/CampaignGroupsApi
* @version 3.0.0-beta
*/
export default class CampaignGroupsApi {

    /**
    * Constructs a new CampaignGroupsApi. 
    * @alias module:org.egoi.client/org.egoi.client.api/CampaignGroupsApi
    * @class
    * @param {module:org.egoi.client/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:org.egoi.client/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCampaignGroup operation.
     * @callback module:org.egoi.client/org.egoi.client.api/CampaignGroupsApi~createCampaignGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:org.egoi.client/org.egoi.client.model/CampaignGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new campaign group
     * Create a new campaign group
     * @param {module:org.egoi.client/org.egoi.client.model/CampaignGroup} campaignGroup Parameters for the Campaign Group
     * @param {module:org.egoi.client/org.egoi.client.api/CampaignGroupsApi~createCampaignGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.egoi.client/org.egoi.client.model/CampaignGroup}
     */
    createCampaignGroup(campaignGroup, callback) {
      let postBody = campaignGroup;
      // verify the required parameter 'campaignGroup' is set
      if (campaignGroup === undefined || campaignGroup === null) {
        throw new Error("Missing the required parameter 'campaignGroup' when calling createCampaignGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CampaignGroup;
      return this.apiClient.callApi(
        '/campaign-groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCampaignGroup operation.
     * @callback module:org.egoi.client/org.egoi.client.api/CampaignGroupsApi~deleteCampaignGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Campaign Group
     * Remove campaign group information given its ID
     * @param {Number} groupId ID of the Campaign Group
     * @param {module:org.egoi.client/org.egoi.client.api/CampaignGroupsApi~deleteCampaignGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCampaignGroup(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteCampaignGroup");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/campaign-groups/{group_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllCampaignGroups operation.
     * @callback module:org.egoi.client/org.egoi.client.api/CampaignGroupsApi~getAllCampaignGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:org.egoi.client/org.egoi.client.model/CampaignGroupCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all campaign groups
     * Returns all campaign groups
     * @param {Object} opts Optional parameters
     * @param {Number} opts.groupId Reference attribute to campaign group id
     * @param {String} opts.name Reference attribute to campaign group id
     * @param {Number} opts.limit Number of items to return (default to 10)
     * @param {Number} opts.offset Element offset (starting at zero for the first element)
     * @param {module:org.egoi.client/org.egoi.client.api/CampaignGroupsApi~getAllCampaignGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.egoi.client/org.egoi.client.model/CampaignGroupCollection}
     */
    getAllCampaignGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'group_id': opts['groupId'],
        'name': opts['name'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CampaignGroupCollection;
      return this.apiClient.callApi(
        '/campaign-groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCampaignGroup operation.
     * @callback module:org.egoi.client/org.egoi.client.api/CampaignGroupsApi~updateCampaignGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:org.egoi.client/org.egoi.client.model/CampaignGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a specific campaign group
     * Update a campaign group
     * @param {Number} groupId ID of the Campaign Group
     * @param {module:org.egoi.client/org.egoi.client.model/CampaignGroup} campaignGroup Parameters for the Campaign Group
     * @param {module:org.egoi.client/org.egoi.client.api/CampaignGroupsApi~updateCampaignGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.egoi.client/org.egoi.client.model/CampaignGroup}
     */
    updateCampaignGroup(groupId, campaignGroup, callback) {
      let postBody = campaignGroup;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling updateCampaignGroup");
      }
      // verify the required parameter 'campaignGroup' is set
      if (campaignGroup === undefined || campaignGroup === null) {
        throw new Error("Missing the required parameter 'campaignGroup' when calling updateCampaignGroup");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CampaignGroup;
      return this.apiClient.callApi(
        '/campaign-groups/{group_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
