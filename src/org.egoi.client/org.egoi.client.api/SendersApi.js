/**
 * APIv3 (Beta)
 *  # Introduction Just a quick pick!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # HTTP Methods for RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  <security-definitions/>
 *
 * The version of the OpenAPI document: 3.0.0-beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequest from '../org.egoi.client.model/BadRequest';
import CellphoneSender from '../org.egoi.client.model/CellphoneSender';
import CellphoneSenderCollection from '../org.egoi.client.model/CellphoneSenderCollection';
import Conflict from '../org.egoi.client.model/Conflict';
import EmailSender from '../org.egoi.client.model/EmailSender';
import EmailSenderCollection from '../org.egoi.client.model/EmailSenderCollection';
import EmailSenderPutRequest from '../org.egoi.client.model/EmailSenderPutRequest';
import Forbidden from '../org.egoi.client.model/Forbidden';
import InternalServerError from '../org.egoi.client.model/InternalServerError';
import NotFound from '../org.egoi.client.model/NotFound';
import PhoneSender from '../org.egoi.client.model/PhoneSender';
import PhoneSenderCollection from '../org.egoi.client.model/PhoneSenderCollection';
import Unauthorized from '../org.egoi.client.model/Unauthorized';
import UnprocessableEntity from '../org.egoi.client.model/UnprocessableEntity';

/**
* Senders service.
* @module org.egoi.client/org.egoi.client.api/SendersApi
* @version 3.0.0-beta
*/
export default class SendersApi {

    /**
    * Constructs a new SendersApi. 
    * @alias module:org.egoi.client/org.egoi.client.api/SendersApi
    * @class
    * @param {module:org.egoi.client/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:org.egoi.client/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCellphoneSender operation.
     * @callback module:org.egoi.client/org.egoi.client.api/SendersApi~createCellphoneSenderCallback
     * @param {String} error Error message, if any.
     * @param {module:org.egoi.client/org.egoi.client.model/CellphoneSender} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create cellphone sender
     * Creates a cellphone sender
     * @param {module:org.egoi.client/org.egoi.client.model/CellphoneSender} cellphoneSender Parameters for the sender
     * @param {module:org.egoi.client/org.egoi.client.api/SendersApi~createCellphoneSenderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.egoi.client/org.egoi.client.model/CellphoneSender}
     */
    createCellphoneSender(cellphoneSender, callback) {
      let postBody = cellphoneSender;
      // verify the required parameter 'cellphoneSender' is set
      if (cellphoneSender === undefined || cellphoneSender === null) {
        throw new Error("Missing the required parameter 'cellphoneSender' when calling createCellphoneSender");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CellphoneSender;
      return this.apiClient.callApi(
        '/senders/cellphone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEmailSender operation.
     * @callback module:org.egoi.client/org.egoi.client.api/SendersApi~createEmailSenderCallback
     * @param {String} error Error message, if any.
     * @param {module:org.egoi.client/org.egoi.client.model/EmailSender} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create email sender
     * Creates an email sender
     * @param {module:org.egoi.client/org.egoi.client.model/EmailSender} emailSender Parameters for the sender
     * @param {module:org.egoi.client/org.egoi.client.api/SendersApi~createEmailSenderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.egoi.client/org.egoi.client.model/EmailSender}
     */
    createEmailSender(emailSender, callback) {
      let postBody = emailSender;
      // verify the required parameter 'emailSender' is set
      if (emailSender === undefined || emailSender === null) {
        throw new Error("Missing the required parameter 'emailSender' when calling createEmailSender");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailSender;
      return this.apiClient.callApi(
        '/senders/email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPhoneSender operation.
     * @callback module:org.egoi.client/org.egoi.client.api/SendersApi~createPhoneSenderCallback
     * @param {String} error Error message, if any.
     * @param {module:org.egoi.client/org.egoi.client.model/PhoneSender} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create phone sender
     * Creates a phone sender
     * @param {module:org.egoi.client/org.egoi.client.model/PhoneSender} phoneSender Parameters for the sender
     * @param {module:org.egoi.client/org.egoi.client.api/SendersApi~createPhoneSenderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.egoi.client/org.egoi.client.model/PhoneSender}
     */
    createPhoneSender(phoneSender, callback) {
      let postBody = phoneSender;
      // verify the required parameter 'phoneSender' is set
      if (phoneSender === undefined || phoneSender === null) {
        throw new Error("Missing the required parameter 'phoneSender' when calling createPhoneSender");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PhoneSender;
      return this.apiClient.callApi(
        '/senders/phone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCellphoneSender operation.
     * @callback module:org.egoi.client/org.egoi.client.api/SendersApi~deleteCellphoneSenderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove cellphone sender
     * Remove sender information given its ID
     * @param {Number} senderId ID of the Sender
     * @param {module:org.egoi.client/org.egoi.client.api/SendersApi~deleteCellphoneSenderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCellphoneSender(senderId, callback) {
      let postBody = null;
      // verify the required parameter 'senderId' is set
      if (senderId === undefined || senderId === null) {
        throw new Error("Missing the required parameter 'senderId' when calling deleteCellphoneSender");
      }

      let pathParams = {
        'sender_id': senderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/senders/cellphone/{sender_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailSender operation.
     * @callback module:org.egoi.client/org.egoi.client.api/SendersApi~deleteEmailSenderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove email sender
     * Remove sender information given its ID
     * @param {Number} senderId ID of the Sender
     * @param {module:org.egoi.client/org.egoi.client.api/SendersApi~deleteEmailSenderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEmailSender(senderId, callback) {
      let postBody = null;
      // verify the required parameter 'senderId' is set
      if (senderId === undefined || senderId === null) {
        throw new Error("Missing the required parameter 'senderId' when calling deleteEmailSender");
      }

      let pathParams = {
        'sender_id': senderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/senders/email/{sender_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePhoneSender operation.
     * @callback module:org.egoi.client/org.egoi.client.api/SendersApi~deletePhoneSenderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove phone sender
     * Remove sender information given its ID
     * @param {Number} senderId ID of the Sender
     * @param {module:org.egoi.client/org.egoi.client.api/SendersApi~deletePhoneSenderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePhoneSender(senderId, callback) {
      let postBody = null;
      // verify the required parameter 'senderId' is set
      if (senderId === undefined || senderId === null) {
        throw new Error("Missing the required parameter 'senderId' when calling deletePhoneSender");
      }

      let pathParams = {
        'sender_id': senderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/senders/phone/{sender_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllCellphoneSenders operation.
     * @callback module:org.egoi.client/org.egoi.client.api/SendersApi~getAllCellphoneSendersCallback
     * @param {String} error Error message, if any.
     * @param {module:org.egoi.client/org.egoi.client.model/CellphoneSenderCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all cellphone senders
     * Returns all cellphone senders
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Element offset (starting at zero for the first element)
     * @param {Number} opts.limit Number of items to return (default to 10)
     * @param {module:org.egoi.client/org.egoi.client.model/String} opts.status Status filter
     * @param {module:org.egoi.client/org.egoi.client.api/SendersApi~getAllCellphoneSendersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.egoi.client/org.egoi.client.model/CellphoneSenderCollection}
     */
    getAllCellphoneSenders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CellphoneSenderCollection;
      return this.apiClient.callApi(
        '/senders/cellphone', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllEmailSenders operation.
     * @callback module:org.egoi.client/org.egoi.client.api/SendersApi~getAllEmailSendersCallback
     * @param {String} error Error message, if any.
     * @param {module:org.egoi.client/org.egoi.client.model/EmailSenderCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all email senders
     * Returns all email senders
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Element offset (starting at zero for the first element)
     * @param {Number} opts.limit Number of items to return (default to 10)
     * @param {module:org.egoi.client/org.egoi.client.model/String} opts.status Status filter
     * @param {module:org.egoi.client/org.egoi.client.api/SendersApi~getAllEmailSendersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.egoi.client/org.egoi.client.model/EmailSenderCollection}
     */
    getAllEmailSenders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailSenderCollection;
      return this.apiClient.callApi(
        '/senders/email', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllPhoneSenders operation.
     * @callback module:org.egoi.client/org.egoi.client.api/SendersApi~getAllPhoneSendersCallback
     * @param {String} error Error message, if any.
     * @param {module:org.egoi.client/org.egoi.client.model/PhoneSenderCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all phone senders
     * Returns all phone senders
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Element offset (starting at zero for the first element)
     * @param {Number} opts.limit Number of items to return (default to 10)
     * @param {module:org.egoi.client/org.egoi.client.model/String} opts.status Status filter
     * @param {module:org.egoi.client/org.egoi.client.api/SendersApi~getAllPhoneSendersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.egoi.client/org.egoi.client.model/PhoneSenderCollection}
     */
    getAllPhoneSenders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PhoneSenderCollection;
      return this.apiClient.callApi(
        '/senders/phone', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEmailSender operation.
     * @callback module:org.egoi.client/org.egoi.client.api/SendersApi~putEmailSenderCallback
     * @param {String} error Error message, if any.
     * @param {module:org.egoi.client/org.egoi.client.model/EmailSender} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email sender
     * Updates an email sender
     * @param {Number} senderId ID of the Sender
     * @param {module:org.egoi.client/org.egoi.client.model/EmailSenderPutRequest} emailSenderPutRequest Parameters for the contact
     * @param {module:org.egoi.client/org.egoi.client.api/SendersApi~putEmailSenderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:org.egoi.client/org.egoi.client.model/EmailSender}
     */
    putEmailSender(senderId, emailSenderPutRequest, callback) {
      let postBody = emailSenderPutRequest;
      // verify the required parameter 'senderId' is set
      if (senderId === undefined || senderId === null) {
        throw new Error("Missing the required parameter 'senderId' when calling putEmailSender");
      }
      // verify the required parameter 'emailSenderPutRequest' is set
      if (emailSenderPutRequest === undefined || emailSenderPutRequest === null) {
        throw new Error("Missing the required parameter 'emailSenderPutRequest' when calling putEmailSender");
      }

      let pathParams = {
        'sender_id': senderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailSender;
      return this.apiClient.callApi(
        '/senders/email/{sender_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
